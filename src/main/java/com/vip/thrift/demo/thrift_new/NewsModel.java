/**
 * Autogenerated by Thrift Compiler (0.9.2)
 * 
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * @generated
 */
package com.vip.thrift.demo.thrift_new;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked" })
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-9-28")
public class NewsModel implements org.apache.thrift.TBase<NewsModel, NewsModel._Fields>, java.io.Serializable,
		Cloneable, Comparable<NewsModel> {
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"NewsModel");

	private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id",
			org.apache.thrift.protocol.TType.I32, (short) 1);
	private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"title", org.apache.thrift.protocol.TType.STRING, (short) 2);
	private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"content", org.apache.thrift.protocol.TType.STRING, (short) 3);
	private static final org.apache.thrift.protocol.TField MEDIA_FROM_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"media_from", org.apache.thrift.protocol.TType.STRING, (short) 4);
	private static final org.apache.thrift.protocol.TField AUTHOR_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"author", org.apache.thrift.protocol.TType.STRING, (short) 5);

	private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
	static {
		schemes.put(StandardScheme.class, new NewsModelStandardSchemeFactory());
		schemes.put(TupleScheme.class, new NewsModelTupleSchemeFactory());
	}

	public int id; // required
	public String title; // required
	public String content; // required
	public String media_from; // required
	public String author; // required

	/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		ID((short) 1, "id"), TITLE((short) 2, "title"), CONTENT((short) 3, "content"), MEDIA_FROM((short) 4,
				"media_from"), AUTHOR((short) 5, "author");

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // ID
				return ID;
			case 2: // TITLE
				return TITLE;
			case 3: // CONTENT
				return CONTENT;
			case 4: // MEDIA_FROM
				return MEDIA_FROM;
			case 5: // AUTHOR
				return AUTHOR;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	private static final int __ID_ISSET_ID = 0;
	private byte __isset_bitfield = 0;
	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id",
				org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(
						org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title",
				org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(
						org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content",
				org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(
						org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.MEDIA_FROM, new org.apache.thrift.meta_data.FieldMetaData("media_from",
				org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(
						org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.AUTHOR, new org.apache.thrift.meta_data.FieldMetaData("author",
				org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(
						org.apache.thrift.protocol.TType.STRING)));
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NewsModel.class, metaDataMap);
	}

	public NewsModel() {
	}

	public NewsModel(int id, String title, String content, String media_from, String author) {
		this();
		this.id = id;
		setIdIsSet(true);
		this.title = title;
		this.content = content;
		this.media_from = media_from;
		this.author = author;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public NewsModel(NewsModel other) {
		__isset_bitfield = other.__isset_bitfield;
		this.id = other.id;
		if (other.isSetTitle()) {
			this.title = other.title;
		}
		if (other.isSetContent()) {
			this.content = other.content;
		}
		if (other.isSetMedia_from()) {
			this.media_from = other.media_from;
		}
		if (other.isSetAuthor()) {
			this.author = other.author;
		}
	}

	public NewsModel deepCopy() {
		return new NewsModel(this);
	}

	public void clear() {
		setIdIsSet(false);
		this.id = 0;
		this.title = null;
		this.content = null;
		this.media_from = null;
		this.author = null;
	}

	public int getId() {
		return this.id;
	}

	public NewsModel setId(int id) {
		this.id = id;
		setIdIsSet(true);
		return this;
	}

	public void unsetId() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
	}

	/** Returns true if field id is set (has been assigned a value) and false otherwise */
	public boolean isSetId() {
		return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
	}

	public void setIdIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
	}

	public String getTitle() {
		return this.title;
	}

	public NewsModel setTitle(String title) {
		this.title = title;
		return this;
	}

	public void unsetTitle() {
		this.title = null;
	}

	/** Returns true if field title is set (has been assigned a value) and false otherwise */
	public boolean isSetTitle() {
		return this.title != null;
	}

	public void setTitleIsSet(boolean value) {
		if (!value) {
			this.title = null;
		}
	}

	public String getContent() {
		return this.content;
	}

	public NewsModel setContent(String content) {
		this.content = content;
		return this;
	}

	public void unsetContent() {
		this.content = null;
	}

	/** Returns true if field content is set (has been assigned a value) and false otherwise */
	public boolean isSetContent() {
		return this.content != null;
	}

	public void setContentIsSet(boolean value) {
		if (!value) {
			this.content = null;
		}
	}

	public String getMedia_from() {
		return this.media_from;
	}

	public NewsModel setMedia_from(String media_from) {
		this.media_from = media_from;
		return this;
	}

	public void unsetMedia_from() {
		this.media_from = null;
	}

	/** Returns true if field media_from is set (has been assigned a value) and false otherwise */
	public boolean isSetMedia_from() {
		return this.media_from != null;
	}

	public void setMedia_fromIsSet(boolean value) {
		if (!value) {
			this.media_from = null;
		}
	}

	public String getAuthor() {
		return this.author;
	}

	public NewsModel setAuthor(String author) {
		this.author = author;
		return this;
	}

	public void unsetAuthor() {
		this.author = null;
	}

	/** Returns true if field author is set (has been assigned a value) and false otherwise */
	public boolean isSetAuthor() {
		return this.author != null;
	}

	public void setAuthorIsSet(boolean value) {
		if (!value) {
			this.author = null;
		}
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case ID:
			if (value == null) {
				unsetId();
			} else {
				setId((Integer) value);
			}
			break;

		case TITLE:
			if (value == null) {
				unsetTitle();
			} else {
				setTitle((String) value);
			}
			break;

		case CONTENT:
			if (value == null) {
				unsetContent();
			} else {
				setContent((String) value);
			}
			break;

		case MEDIA_FROM:
			if (value == null) {
				unsetMedia_from();
			} else {
				setMedia_from((String) value);
			}
			break;

		case AUTHOR:
			if (value == null) {
				unsetAuthor();
			} else {
				setAuthor((String) value);
			}
			break;

		}
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
		case ID:
			return Integer.valueOf(getId());

		case TITLE:
			return getTitle();

		case CONTENT:
			return getContent();

		case MEDIA_FROM:
			return getMedia_from();

		case AUTHOR:
			return getAuthor();

		}
		throw new IllegalStateException();
	}

	/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case ID:
			return isSetId();
		case TITLE:
			return isSetTitle();
		case CONTENT:
			return isSetContent();
		case MEDIA_FROM:
			return isSetMedia_from();
		case AUTHOR:
			return isSetAuthor();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof NewsModel)
			return this.equals((NewsModel) that);
		return false;
	}

	public boolean equals(NewsModel that) {
		if (that == null)
			return false;

		boolean this_present_id = true;
		boolean that_present_id = true;
		if (this_present_id || that_present_id) {
			if (!(this_present_id && that_present_id))
				return false;
			if (this.id != that.id)
				return false;
		}

		boolean this_present_title = true && this.isSetTitle();
		boolean that_present_title = true && that.isSetTitle();
		if (this_present_title || that_present_title) {
			if (!(this_present_title && that_present_title))
				return false;
			if (!this.title.equals(that.title))
				return false;
		}

		boolean this_present_content = true && this.isSetContent();
		boolean that_present_content = true && that.isSetContent();
		if (this_present_content || that_present_content) {
			if (!(this_present_content && that_present_content))
				return false;
			if (!this.content.equals(that.content))
				return false;
		}

		boolean this_present_media_from = true && this.isSetMedia_from();
		boolean that_present_media_from = true && that.isSetMedia_from();
		if (this_present_media_from || that_present_media_from) {
			if (!(this_present_media_from && that_present_media_from))
				return false;
			if (!this.media_from.equals(that.media_from))
				return false;
		}

		boolean this_present_author = true && this.isSetAuthor();
		boolean that_present_author = true && that.isSetAuthor();
		if (this_present_author || that_present_author) {
			if (!(this_present_author && that_present_author))
				return false;
			if (!this.author.equals(that.author))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		List<Object> list = new ArrayList<Object>();

		boolean present_id = true;
		list.add(present_id);
		if (present_id)
			list.add(id);

		boolean present_title = true && (isSetTitle());
		list.add(present_title);
		if (present_title)
			list.add(title);

		boolean present_content = true && (isSetContent());
		list.add(present_content);
		if (present_content)
			list.add(content);

		boolean present_media_from = true && (isSetMedia_from());
		list.add(present_media_from);
		if (present_media_from)
			list.add(media_from);

		boolean present_author = true && (isSetAuthor());
		list.add(present_author);
		if (present_author)
			list.add(author);

		return list.hashCode();
	}

	public int compareTo(NewsModel other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetId()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetTitle()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetContent()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetMedia_from()).compareTo(other.isSetMedia_from());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetMedia_from()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.media_from, other.media_from);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetAuthor()).compareTo(other.isSetAuthor());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetAuthor()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.author, other.author);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("NewsModel(");
		boolean first = true;

		sb.append("id:");
		sb.append(this.id);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("title:");
		if (this.title == null) {
			sb.append("null");
		} else {
			sb.append(this.title);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("content:");
		if (this.content == null) {
			sb.append("null");
		} else {
			sb.append(this.content);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("media_from:");
		if (this.media_from == null) {
			sb.append("null");
		} else {
			sb.append(this.media_from);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("author:");
		if (this.author == null) {
			sb.append("null");
		} else {
			sb.append(this.author);
		}
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(
					out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the
			// default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class NewsModelStandardSchemeFactory implements SchemeFactory {
		public NewsModelStandardScheme getScheme() {
			return new NewsModelStandardScheme();
		}
	}

	private static class NewsModelStandardScheme extends StandardScheme<NewsModel> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, NewsModel struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // ID
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.id = iprot.readI32();
						struct.setIdIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // TITLE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.title = iprot.readString();
						struct.setTitleIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // CONTENT
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.content = iprot.readString();
						struct.setContentIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // MEDIA_FROM
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.media_from = iprot.readString();
						struct.setMedia_fromIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // AUTHOR
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.author = iprot.readString();
						struct.setAuthorIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, NewsModel struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			oprot.writeFieldBegin(ID_FIELD_DESC);
			oprot.writeI32(struct.id);
			oprot.writeFieldEnd();
			if (struct.title != null) {
				oprot.writeFieldBegin(TITLE_FIELD_DESC);
				oprot.writeString(struct.title);
				oprot.writeFieldEnd();
			}
			if (struct.content != null) {
				oprot.writeFieldBegin(CONTENT_FIELD_DESC);
				oprot.writeString(struct.content);
				oprot.writeFieldEnd();
			}
			if (struct.media_from != null) {
				oprot.writeFieldBegin(MEDIA_FROM_FIELD_DESC);
				oprot.writeString(struct.media_from);
				oprot.writeFieldEnd();
			}
			if (struct.author != null) {
				oprot.writeFieldBegin(AUTHOR_FIELD_DESC);
				oprot.writeString(struct.author);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class NewsModelTupleSchemeFactory implements SchemeFactory {
		public NewsModelTupleScheme getScheme() {
			return new NewsModelTupleScheme();
		}
	}

	private static class NewsModelTupleScheme extends TupleScheme<NewsModel> {

		public void write(org.apache.thrift.protocol.TProtocol prot, NewsModel struct)
				throws org.apache.thrift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			BitSet optionals = new BitSet();
			if (struct.isSetId()) {
				optionals.set(0);
			}
			if (struct.isSetTitle()) {
				optionals.set(1);
			}
			if (struct.isSetContent()) {
				optionals.set(2);
			}
			if (struct.isSetMedia_from()) {
				optionals.set(3);
			}
			if (struct.isSetAuthor()) {
				optionals.set(4);
			}
			oprot.writeBitSet(optionals, 5);
			if (struct.isSetId()) {
				oprot.writeI32(struct.id);
			}
			if (struct.isSetTitle()) {
				oprot.writeString(struct.title);
			}
			if (struct.isSetContent()) {
				oprot.writeString(struct.content);
			}
			if (struct.isSetMedia_from()) {
				oprot.writeString(struct.media_from);
			}
			if (struct.isSetAuthor()) {
				oprot.writeString(struct.author);
			}
		}

		public void read(org.apache.thrift.protocol.TProtocol prot, NewsModel struct)
				throws org.apache.thrift.TException {
			TTupleProtocol iprot = (TTupleProtocol) prot;
			BitSet incoming = iprot.readBitSet(5);
			if (incoming.get(0)) {
				struct.id = iprot.readI32();
				struct.setIdIsSet(true);
			}
			if (incoming.get(1)) {
				struct.title = iprot.readString();
				struct.setTitleIsSet(true);
			}
			if (incoming.get(2)) {
				struct.content = iprot.readString();
				struct.setContentIsSet(true);
			}
			if (incoming.get(3)) {
				struct.media_from = iprot.readString();
				struct.setMedia_fromIsSet(true);
			}
			if (incoming.get(4)) {
				struct.author = iprot.readString();
				struct.setAuthorIsSet(true);
			}
		}
	}

}
